{"ast":null,"code":"// src/api/areas.js\n\n// קריאות עמידות: קודם יחסי (עובר דרך proxy), ואם נכשל - פונה ישירות ל-3001\nconst CANDIDATES = [\"areas\", \"api/areas\", \"areas/list\", \"area\", \"areas/all\"];\nasync function reqOnce(url, opts) {\n  var _ref, _data$data;\n  const r = await fetch(url, opts);\n  if (!r.ok) throw new Error(`HTTP ${r.status} ${url}`);\n  // חלק מהשרתים מחזירים {data:[...]} וחלק מחזירים רשימה ישירות\n  const data = await r.json();\n  return Array.isArray(data) ? data : (_ref = (_data$data = data.data) !== null && _data$data !== void 0 ? _data$data : data.areas) !== null && _ref !== void 0 ? _ref : data;\n}\nasync function request(path, opts) {\n  var _last;\n  // 1) ניסיון יחסי (יעבור דרך CRA proxy אם מוגדר)\n  for (const p of [path, path.replace(/^\\//, \"\")]) {\n    try {\n      return await reqOnce(`/${p}`, opts);\n    } catch (_) {}\n  }\n  // 2) ניסיון ישיר ל-3001 (עוקף proxy)\n  for (const p of [path, path.replace(/^\\//, \"\")]) {\n    try {\n      return await reqOnce(`http://localhost:3001/${p}`, opts);\n    } catch (e) {\n      var last = e;\n    }\n  }\n  throw (_last = last) !== null && _last !== void 0 ? _last : new Error(\"request failed\");\n}\nexport async function listAreas() {\n  // ננסה כמה ראוטים נפוצים ל-read\n  for (const p of CANDIDATES) {\n    try {\n      return await request(p);\n    } catch (_) {}\n  }\n  throw new Error(\"listAreas failed\");\n}\nexport async function createArea(payload) {\n  return request(\"areas\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nexport async function updateArea(id, payload) {\n  return request(`areas/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\nexport async function deleteArea(id) {\n  return request(`areas/${id}`, {\n    method: \"DELETE\"\n  });\n}","map":{"version":3,"names":["CANDIDATES","reqOnce","url","opts","_ref","_data$data","r","fetch","ok","Error","status","data","json","Array","isArray","areas","request","path","_last","p","replace","_","e","last","listAreas","createArea","payload","method","headers","body","JSON","stringify","updateArea","id","deleteArea"],"sources":["C:/Users/DAN/Desktop/fullProject/frontend-react/frontend-react/src/api/areas.js"],"sourcesContent":["// src/api/areas.js\r\n\r\n// קריאות עמידות: קודם יחסי (עובר דרך proxy), ואם נכשל - פונה ישירות ל-3001\r\nconst CANDIDATES = [\"areas\", \"api/areas\", \"areas/list\", \"area\", \"areas/all\"];\r\n\r\nasync function reqOnce(url, opts) {\r\n  const r = await fetch(url, opts);\r\n  if (!r.ok) throw new Error(`HTTP ${r.status} ${url}`);\r\n  // חלק מהשרתים מחזירים {data:[...]} וחלק מחזירים רשימה ישירות\r\n  const data = await r.json();\r\n  return Array.isArray(data) ? data : (data.data ?? data.areas ?? data);\r\n}\r\n\r\nasync function request(path, opts) {\r\n  // 1) ניסיון יחסי (יעבור דרך CRA proxy אם מוגדר)\r\n  for (const p of [path, path.replace(/^\\//, \"\")]) {\r\n    try { return await reqOnce(`/${p}`, opts); } catch (_) {}\r\n  }\r\n  // 2) ניסיון ישיר ל-3001 (עוקף proxy)\r\n  for (const p of [path, path.replace(/^\\//, \"\")]) {\r\n    try { return await reqOnce(`http://localhost:3001/${p}`, opts); } catch (e) { var last = e; }\r\n  }\r\n  throw last ?? new Error(\"request failed\");\r\n}\r\n\r\nexport async function listAreas() {\r\n  // ננסה כמה ראוטים נפוצים ל-read\r\n  for (const p of CANDIDATES) {\r\n    try { return await request(p); } catch (_) {}\r\n  }\r\n  throw new Error(\"listAreas failed\");\r\n}\r\n\r\nexport async function createArea(payload) {\r\n  return request(\"areas\", {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(payload),\r\n  });\r\n}\r\n\r\nexport async function updateArea(id, payload) {\r\n  return request(`areas/${id}`, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(payload),\r\n  });\r\n}\r\n\r\nexport async function deleteArea(id) {\r\n  return request(`areas/${id}`, { method: \"DELETE\" });\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,UAAU,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,CAAC;AAE5E,eAAeC,OAAOA,CAACC,GAAG,EAAEC,IAAI,EAAE;EAAA,IAAAC,IAAA,EAAAC,UAAA;EAChC,MAAMC,CAAC,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,IAAI,CAAC;EAChC,IAAI,CAACG,CAAC,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,QAAQH,CAAC,CAACI,MAAM,IAAIR,GAAG,EAAE,CAAC;EACrD;EACA,MAAMS,IAAI,GAAG,MAAML,CAAC,CAACM,IAAI,CAAC,CAAC;EAC3B,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,IAAAP,IAAA,IAAAC,UAAA,GAAIM,IAAI,CAACA,IAAI,cAAAN,UAAA,cAAAA,UAAA,GAAIM,IAAI,CAACI,KAAK,cAAAX,IAAA,cAAAA,IAAA,GAAIO,IAAK;AACvE;AAEA,eAAeK,OAAOA,CAACC,IAAI,EAAEd,IAAI,EAAE;EAAA,IAAAe,KAAA;EACjC;EACA,KAAK,MAAMC,CAAC,IAAI,CAACF,IAAI,EAAEA,IAAI,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE;IAC/C,IAAI;MAAE,OAAO,MAAMnB,OAAO,CAAC,IAAIkB,CAAC,EAAE,EAAEhB,IAAI,CAAC;IAAE,CAAC,CAAC,OAAOkB,CAAC,EAAE,CAAC;EAC1D;EACA;EACA,KAAK,MAAMF,CAAC,IAAI,CAACF,IAAI,EAAEA,IAAI,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE;IAC/C,IAAI;MAAE,OAAO,MAAMnB,OAAO,CAAC,yBAAyBkB,CAAC,EAAE,EAAEhB,IAAI,CAAC;IAAE,CAAC,CAAC,OAAOmB,CAAC,EAAE;MAAE,IAAIC,IAAI,GAAGD,CAAC;IAAE;EAC9F;EACA,OAAAJ,KAAA,GAAMK,IAAI,cAAAL,KAAA,cAAAA,KAAA,GAAI,IAAIT,KAAK,CAAC,gBAAgB,CAAC;AAC3C;AAEA,OAAO,eAAee,SAASA,CAAA,EAAG;EAChC;EACA,KAAK,MAAML,CAAC,IAAInB,UAAU,EAAE;IAC1B,IAAI;MAAE,OAAO,MAAMgB,OAAO,CAACG,CAAC,CAAC;IAAE,CAAC,CAAC,OAAOE,CAAC,EAAE,CAAC;EAC9C;EACA,MAAM,IAAIZ,KAAK,CAAC,kBAAkB,CAAC;AACrC;AAEA,OAAO,eAAegB,UAAUA,CAACC,OAAO,EAAE;EACxC,OAAOV,OAAO,CAAC,OAAO,EAAE;IACtBW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAC9B,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeM,UAAUA,CAACC,EAAE,EAAEP,OAAO,EAAE;EAC5C,OAAOV,OAAO,CAAC,SAASiB,EAAE,EAAE,EAAE;IAC5BN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAC9B,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeQ,UAAUA,CAACD,EAAE,EAAE;EACnC,OAAOjB,OAAO,CAAC,SAASiB,EAAE,EAAE,EAAE;IAAEN,MAAM,EAAE;EAAS,CAAC,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}