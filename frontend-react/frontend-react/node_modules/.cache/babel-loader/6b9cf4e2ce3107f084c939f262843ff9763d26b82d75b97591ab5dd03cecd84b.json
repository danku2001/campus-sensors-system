{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DAN\\\\Desktop\\\\fullProject\\\\frontend-react\\\\frontend-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './styles.css';\nimport Dashboard from './components/Dashboard.jsx';\nimport { getAreas, getFloors, getAreaShading as getAreaShadingFromAreas } from './api/areas';\nimport { getSensors } from './api/sensors';\nimport { getAreaShading, setAreaShading } from './api/shading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [areas, setAreas] = useState([]);\n  const [areaId, setAreaId] = useState(null);\n  const [floors, setFloors] = useState([]);\n  const [floorId, setFloorId] = useState(null);\n  const [sensors, setSensors] = useState([]);\n  const [shading, setShading] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // טען אזורים\n  useEffect(() => {\n    let mounted = true;\n    setLoading(true);\n    getAreas().then(d => {\n      if (mounted) setAreas(d);\n    }).catch(e => {\n      if (mounted) setError(e.message);\n    }).finally(() => mounted && setLoading(false));\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  // טען קומות, סנסורים, הצללה כשנבחר אזור\n  useEffect(() => {\n    if (!areaId) {\n      setFloors([]);\n      setFloorId(null);\n      setSensors([]);\n      setShading(null);\n      return;\n    }\n    let mounted = true;\n    setLoading(true);\n    Promise.all([getFloors(areaId).catch(() => []), getSensors({\n      areaId,\n      floorId: null\n    }).catch(() => []),\n    // תמיכה גם בראוט של areas וגם של shading אם תרצה להחליף\n    getAreaShading(areaId).catch(() => getAreaShadingFromAreas(areaId).catch(() => null))]).then(([floorsData, sensorsData, shadingData]) => {\n      if (!mounted) return;\n      setFloors(floorsData || []);\n      setSensors(sensorsData || []);\n      setShading(shadingData);\n    }).catch(e => mounted && setError(e.message)).finally(() => mounted && setLoading(false));\n    return () => {\n      mounted = false;\n    };\n  }, [areaId]);\n\n  // כשנבחרה קומה נטען סנסורים לפילטר הזה\n  useEffect(() => {\n    if (!areaId) return;\n    let mounted = true;\n    getSensors({\n      areaId,\n      floorId\n    }).then(d => {\n      if (mounted) setSensors(d || []);\n    }).catch(e => mounted && setError(e.message));\n    return () => {\n      mounted = false;\n    };\n  }, [areaId, floorId]);\n  async function onToggleShading(status) {\n    if (!areaId) return;\n    try {\n      const updated = await setAreaShading(areaId, status);\n      setShading(updated);\n    } catch (e) {\n      setError(e.message);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Dashboard, {\n    areas: areas,\n    areaId: areaId,\n    onPickArea: setAreaId,\n    floors: floors,\n    floorId: floorId,\n    onPickFloor: setFloorId,\n    sensors: sensors,\n    shading: shading,\n    onToggleShading: onToggleShading,\n    loading: loading,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XXvEcFpkj+t9Q8aOSh433bhDBh8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Dashboard","getAreas","getFloors","getAreaShading","getAreaShadingFromAreas","getSensors","setAreaShading","jsxDEV","_jsxDEV","App","_s","areas","setAreas","areaId","setAreaId","floors","setFloors","floorId","setFloorId","sensors","setSensors","shading","setShading","loading","setLoading","error","setError","mounted","then","d","catch","e","message","finally","Promise","all","floorsData","sensorsData","shadingData","onToggleShading","status","updated","onPickArea","onPickFloor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DAN/Desktop/fullProject/frontend-react/frontend-react/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './styles.css';\nimport Dashboard from './components/Dashboard.jsx';\nimport { getAreas, getFloors, getAreaShading as getAreaShadingFromAreas } from './api/areas';\nimport { getSensors } from './api/sensors';\nimport { getAreaShading, setAreaShading } from './api/shading';\n\nexport default function App() {\n  const [areas, setAreas] = useState([]);\n  const [areaId, setAreaId] = useState(null);\n  const [floors, setFloors] = useState([]);\n  const [floorId, setFloorId] = useState(null);\n  const [sensors, setSensors] = useState([]);\n  const [shading, setShading] = useState(null);\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // טען אזורים\n  useEffect(() => {\n    let mounted = true;\n    setLoading(true);\n    getAreas()\n      .then(d => { if (mounted) setAreas(d); })\n      .catch(e => { if (mounted) setError(e.message); })\n      .finally(() => mounted && setLoading(false));\n    return () => { mounted = false; };\n  }, []);\n\n  // טען קומות, סנסורים, הצללה כשנבחר אזור\n  useEffect(() => {\n    if (!areaId) { setFloors([]); setFloorId(null); setSensors([]); setShading(null); return; }\n    let mounted = true;\n\n    setLoading(true);\n    Promise.all([\n      getFloors(areaId).catch(()=>[]),\n      getSensors({ areaId, floorId: null }).catch(()=>[]),\n      // תמיכה גם בראוט של areas וגם של shading אם תרצה להחליף\n      getAreaShading(areaId).catch(() => getAreaShadingFromAreas(areaId).catch(()=>null)),\n    ])\n    .then(([floorsData, sensorsData, shadingData]) => {\n      if (!mounted) return;\n      setFloors(floorsData || []);\n      setSensors(sensorsData || []);\n      setShading(shadingData);\n    })\n    .catch(e => mounted && setError(e.message))\n    .finally(() => mounted && setLoading(false));\n\n    return () => { mounted = false; };\n  }, [areaId]);\n\n  // כשנבחרה קומה נטען סנסורים לפילטר הזה\n  useEffect(() => {\n    if (!areaId) return;\n    let mounted = true;\n    getSensors({ areaId, floorId })\n      .then(d => { if (mounted) setSensors(d || []); })\n      .catch(e => mounted && setError(e.message));\n    return () => { mounted = false; };\n  }, [areaId, floorId]);\n\n  async function onToggleShading(status) {\n    if (!areaId) return;\n    try {\n      const updated = await setAreaShading(areaId, status);\n      setShading(updated);\n    } catch (e) {\n      setError(e.message);\n    }\n  }\n\n  return (\n    <Dashboard\n      areas={areas} areaId={areaId} onPickArea={setAreaId}\n      floors={floors} floorId={floorId} onPickFloor={setFloorId}\n      sensors={sensors}\n      shading={shading} onToggleShading={onToggleShading}\n      loading={loading} error={error}\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}